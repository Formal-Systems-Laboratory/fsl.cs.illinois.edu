#!/usr/bin/env python2

import sys
import os
from bibtex2wiki import *
import yaml
from glob import glob
from shutil import copyfile

def get_paper(paper_id, bib_entry):
  year_dir = None
  try:
    if (bib_entry.type == ConferencePaper.type):
      paper = ConferencePaper(paper_id, year_dir, bib_entry) 
    elif (bib_entry.type == JournalPaper.type):
      paper = JournalPaper(paper_id, year_dir, bib_entry) 
    elif (bib_entry.type == TechnicalReport.type):
      paper = TechnicalReport(paper_id, year_dir, bib_entry) 
    elif (bib_entry.type == MasterThesis.type):
      paper = MasterThesis(paper_id, year_dir, bib_entry)
    elif (bib_entry.type == PhDThesis.type):
      paper = PhDThesis(paper_id, year_dir, bib_entry)
    else:
      print_error("unsupported bib entry " + bib_entry.type)
      return None
  except FieldError as e:
    print_error(str(e))
    return None
  return paper

def bibpath(year, id):
    return top_dir('papers', year, id, id + '.bib')
def pdfpath(year, id):
    return top_dir('papers', year, id, id + '.pdf')

def fslbib(path, id):
    if (not os.path.isfile(path)):
      print_warning("no .bib file: " + path)
      return None
    bib = parse_bib(path)
    entries = bib.entries
    if not id in entries:  
      print_warning(".bib file missing paper entry: " + path)
      return None
    return get_paper(id, entries[id])

def paper_to_yaml(paper):
    assert(type(paper.category) == list)
    return yaml.safe_dump({ 'id':         paper.id
                          , 'title':      paper.title
                          , 'tags':       paper.category
                          , 'abstract':   paper.abstract
                          , 'authors':    paper.author_id
                          , 'date':       paper.date
                          })

def top_dir(*args):
    up = os.path.dirname
    return os.path.join(up(up(up(up(os.path.abspath(__file__))))), *args)

with open('_data/papers.yaml', 'w') as f:
    for year in os.listdir(top_dir('papers')):
        if year in ['README.txt', 'fsl_categories.txt']: continue
        for id in os.listdir(top_dir('papers', year)):
            bib = bibpath(year, id)
            paper = fslbib(bib, id)
            if paper == None: continue
            if paper.hidden: continue
            f.write('- ' + 'papers' + '/' + year + '/' + id+ "\n")

# print(parse_bib(sys.argv[1]))
# print(bib_to_dict(sys.argv[1]))
