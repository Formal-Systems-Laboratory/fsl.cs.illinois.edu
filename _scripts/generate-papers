#!/usr/bin/env python3

import sys
import os
from bibtex2wiki.bibtex2wiki import *
import yaml
from glob import glob
from shutil import copyfile

# Usage: $0 <path-to-fsl-repo>
fsl_repo = sys.argv[1]

def get_paper(paper_id, bib_entry):
  year_dir = None
  try:
    if (bib_entry.type == ConferencePaper.type):
      paper = ConferencePaper(paper_id, year_dir, bib_entry) 
    elif (bib_entry.type == JournalPaper.type):
      paper = JournalPaper(paper_id, year_dir, bib_entry) 
    elif (bib_entry.type == TechnicalReport.type):
      paper = TechnicalReport(paper_id, year_dir, bib_entry) 
    elif (bib_entry.type == MasterThesis.type):
      paper = MasterThesis(paper_id, year_dir, bib_entry)
    elif (bib_entry.type == PhDThesis.type):
      paper = PhDThesis(paper_id, year_dir, bib_entry)
    else:
      print_error("unsupported bib entry " + bib_entry.type)
      return None
  except FieldError as e:
    print_error(str(e))
    return None
  return paper

def bibpath(year, id):
    return fsl_dir('papers', year, id, id + '.bib')
def pdfpath(year, id):
    return fsl_dir('papers', year, id, id + '.pdf')

def fslbib(path, id):
    if (not os.path.isfile(path)):
      print_warning("no .bib file: " + path)
      return None
    bib = parse_bib(path)
    entries = bib.entries
    if not id in entries:  
      print_warning(".bib file missing paper entry: " + path)
      return None
    return get_paper(id, entries[id])

def paper_to_yaml(paper):
    assert(type(paper.category) == list)
    bib = yaml.safe_load(paper.entry.to_string('yaml'))['entries'][paper.id]
    bib['id']   = paper.id
    bib['date']   = paper.date
    bib['authors'] =    list(map(make_links, paper.author_id))
    bib['author_ids'] = list(map(author_id,  paper.author_id))
    bib['category'] = paper.category
    bib['title'] = paper.title.replace('{', '').replace('}', '')
    bib['type'] = paper.entry.type

    return yaml.safe_dump({ 'bib': bib
                          , 'title':  bib['title']
                          , 'layout': 'paper'
                          , 'bib_url': 'publications/' + paper.id + '.bib'
                          , 'pdf_url': 'publications/' + paper.id + '.pdf'
                          }
                         )

def author_id(author):
  if (author.startswith("http")):
    split = author.split(' ', maxsplit = 1)
    return split[1]
  else:
    def filter_alphanum(input):
        return ''.join(ch for ch in input if ch.isalnum())
    split = map(filter_alphanum, map(str.lower, author.split(' ')))
    return '-'.join(split)


def make_links(author):
  if (author.startswith("http")):
    split = author.split(' ', maxsplit = 1)
    return { 'href': split[0], 'text': split[1] }
  else:
    return { 'id': author_id(author), 'text': author }

def fsl_dir(*args):
    return os.path.join(fsl_repo, *args)

for year in os.listdir(fsl_dir('papers')):
    if year in ['README.txt', 'fsl_categories.txt']: continue
    for id in os.listdir(fsl_dir('papers', year)):
        bib = fsl_dir('papers', year, id, id + '.bib')
        pdf = fsl_dir('papers', year, id, id + '.pdf')

        paper = fslbib(bib, id)
        if paper == None: continue
        if paper.hidden: continue

        copyfile(bib, 'publications/' + paper.id + '.bib')
        copyfile(pdf, 'publications/' + paper.id + '.pdf')
        with open('publications/' + paper.id + '.md', 'w') as f:
            f.write('---\n')
            f.write(paper_to_yaml(paper))
            f.write('---\n')
