#!/usr/bin/env python2

import sys
import os
from bibtex2wiki.bibtex2wiki import *
import yaml
from glob import glob
from shutil import copyfile

def get_paper(paper_id, bib_entry):
  year_dir = None
  try:
    if (bib_entry.type == ConferencePaper.type):
      paper = ConferencePaper(paper_id, year_dir, bib_entry) 
    elif (bib_entry.type == JournalPaper.type):
      paper = JournalPaper(paper_id, year_dir, bib_entry) 
    elif (bib_entry.type == TechnicalReport.type):
      paper = TechnicalReport(paper_id, year_dir, bib_entry) 
    elif (bib_entry.type == MasterThesis.type):
      paper = MasterThesis(paper_id, year_dir, bib_entry)
    elif (bib_entry.type == PhDThesis.type):
      paper = PhDThesis(paper_id, year_dir, bib_entry)
    else:
      print_error("unsupported bib entry " + bib_entry.type)
      return None
  except FieldError as e:
    print_error(str(e))
    return None
  return paper

def bibpath(year, id):
    return fsl_dir('papers', year, id, id + '.bib')
def pdfpath(year, id):
    return fsl_dir('papers', year, id, id + '.pdf')

def fslbib(path, id):
    if (not os.path.isfile(path)):
      print_warning("no .bib file: " + path)
      return None
    bib = parse_bib(path)
    entries = bib.entries
    if not id in entries:  
      print_warning(".bib file missing paper entry: " + path)
      return None
    return get_paper(id, entries[id])

def paper_to_yaml(paper):
    assert(type(paper.category) == list)

    # Required fields
    bib = { 'id':         paper.id
          , 'title':      paper.title
          , 'date':       paper.date
          , 'authors':    paper.author_id
          , 'categories': paper.category
          , 'abstract':   paper.abstract
          }

    # Optional Fields
    if hasattr(paper, 'publisher'):           bib['publisher']         =  paper.publisher
    if hasattr(paper, 'booktitle'):           bib['booktitle']         =  paper.booktitle
    if hasattr(paper, 'booktitle_acronym'):   bib['booktitle_acronym'] =  paper.booktitle_acronym
    if hasattr(paper, 'booktitle_url'):       bib['booktitle_url']     =  paper.booktitle_url

    if hasattr(paper, 'numpages'):            bib['numpages']          =  paper.numpages
    if hasattr(paper, 'pages'):               bib['pages']             =  paper.pages

    if hasattr(paper, 'project'):             bib['project']           =  paper.project
    if hasattr(paper, 'project_url'):         bib['project_url']       =  paper.project_url
    if hasattr(paper, 'number'):              bib['number']            =  paper.number
 
    return yaml.safe_dump({ 'bib': bib 
                          , 'title':  paper.title
                          , 'layout': 'paper' 
                          }
                         )

def fsl_dir(*args):
    up = os.path.dirname
    return os.path.join(up(up(os.path.abspath(__file__))), '_fsl', *args)

for year in os.listdir(fsl_dir('papers')):
    if year in ['README.txt', 'fsl_categories.txt']: continue
    for id in os.listdir(fsl_dir('papers', year)):
        bib = fsl_dir('papers', year, id, id + '.bib')
        pdf = fsl_dir('papers', year, id, id + '.pdf')

        paper = fslbib(bib, id)
        if paper == None: continue
        if paper.hidden: continue

        copyfile(bib, 'publications/' + paper.id + '.bib')
        copyfile(pdf, 'publications/' + paper.id + '.pdf')
        with open('publications/' + paper.id + '.md', 'w') as f:
            f.write('---\n')
            f.write(paper_to_yaml(paper))
            f.write('---\n')
